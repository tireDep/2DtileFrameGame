객체 지향 기본 개념 정리

객체 지향 (OOP : Object-Oriented Programming) - 상세 객체 (Object) 프로그램 세계에서 살아 숨시는 것들...

3요소
	캡슐화 (Encapsulation)
		목적 : 코드를 수정 없이 재활용 하는 것
			코드를 재활용하는데, 관련 있는 데이터와 함수가 따로 떨어져 있으면 재활용하기 어렵다.ㅓ
			관련 있는 것들을 한데 뭉쳐서, 한번에 제공해 주는 것이 재활용의 핵심.
		관련 있는 데이터가 어떤 것인지를 파악하는 것이 캡슐화 구현 핵심이다.
	상속 (Inheritance)
		목적 : 재활용성의 확장
		라이브러리의 코드를 수정하지 않고도, 새로운 기능 변경 또는 추가 가능
		부모의 특성을 이어받고, 새로운 기능추가 및 변경 - Override
	다형성 (Polymorphism)
		하나의 변수명, 함수명 등이 상황에 따라 다른 의미로 해석될 수 있다.
			요소 : 오버라이딩, 오버로딩
			상속을 통한 다형성 구현

3 요소는 상호 보완 적이다
	따로 떼어서 생각할 수 없다.
		캡슐화가 되지 않으면, 상속과 다형성은 성립이 안되며
		상속과 다형성은 캡슐화가 이루어 지도록 한다.


원칙 : 꼭 지켜야 할 5원칙
	단일 책임 원칙 (SRP : Single Responsibility Principle)
		객체는 오직 하나의 책임을 가져야 한다.
		책임의 영역이 확실해지고, 클래스간의 연쇄작용을 피할 수 있다.
			중복 제거 효과
		모든 원칙을 지키기 위한 기반 또는 기초
		리팩토링에서 소개하는 위험 상황에 대한 해결법은 대부분 이 원칙과 관련이 있다.

	개방-폐쇄 원칙 (OCP : Open Closed Principle)
		객체는 확장에 대해서는 개방적이고, 수정에 대해서는 폐쇄적이어야 한다.
		기능의 확장은 허용하고, 스스로의 변경은 피해야 한다.
			인터페이스 확장은 허용하고, 데이터의 변경은 피해야 한다.
		변경을 위한 비용은 줄이고, 확장을 위한 비용은 극대화
			기존 구성요소는 수정이 일어나지 않아야하고, 기존 구성요소를 확장해서 재사용 할 수 있어야 한다.
		추상화와 다형성을 잘 활용해야 한다.

	리스코프 치환 법칙 (LSP : Liskov Subtitution Priciple)
		자식 클래스는 언제나 자신의 부모 클래스를 대체할 수 있다.
		부모 클래스가 들어갈 자리에 자식 클래스를 넣어도 계획대로 잘동해야 한다.
		상속의 본질이다.
		서브타입은 기반타입이 약속한 규칙을 지켜야 한다.

	인터페이스 분리 원칙 (ISP : Interface Segregation Priciple)
		클래스가 자신이 이용하지 않는 메서드에 의존하지 않아야 한다.
		클래스는 자신이 사용하지 않는 인터페이스는 구현하지 말아야 한다.
		하나의 일반적인 인터페이스 보다는, 여러개의 구체적인 인터페이스가 낫다.
		가능한 최소한의 인터페이스 만을 제공해야 한다.
		인터페이스가 단일 책임을 가지도록 한다.
			독립된 인터페이스
			상속을 통한 인터페이스 분리
			위임(delegate)를 통한 인터페이스 분리 - 특정 일의 책임을 다른 클래스나 메소드에 맡기는 것
		예)
			잘못된 예
				Worker()
				{
					virtual work();
					virtual eat();
				}

				Standard : public Worker
				{
					override work();
					override eat();
				}

				Parttimer : public Worker
				{
					override work();
					override eat();	// 사용하지 않음. 오버라이드 하지 않아도 됨. 자신이 사용하지 않는 메서드가 있음.
				}
					
			수정한 예
				다중 상속을 사용한 예시를 위한 예시. 다중 상속을 받지 않도록 조심할 것
					다른 객체 지향 언어에서는 Extends 를 활용 (인터페이스)
						다중 상속과 별개. 기능을 확장 시켜 주는 역할
					자식 클래스에만 선언 및 정의

	의존성 역전 법칙 (DIP : Dependency Inversion Principle)
		상위 클래스는 하위 클래스에 의존해서는 안된다.
		복잡한 컴포넌트 간의 커뮤니케이션 관계를 단순화 하기 위한 원리

추상화 / 일반화 연습 및 실습 어떻게 추상화/일반화를 시킬 것인가? 요구 사항 분석 공통점 파악 부모 클래스로 올림

C++ 에서 객체지향 도구 캡슐화를 위한 도구 : class 가상 함수 상속 인스턴스화 : new/delete