0623 요약
* 깃허브
- 여러명 동시 작업 시 수정&덮어쓰기 때문에 에러 발생 가능성이 높아짐
- 협업 툴 생성 -> 형상관리툴 (자동 백업 같은 것)
- psp 시절 -> Visual source safe (문서에 lock, unlock => lock 설정한 한 사람만 수정 가능) ==> 먼저 lock한 사람 승리
- 각자 소스코드 수정된 부분을 자동으로 서버에서 합쳐주는 것, 문제가 생길경우 수동으로 처리 (svm과 git)
- 가장 많이 사용은 svm, 뜨고 있는 것은 git
- 회사에서는 이름 그대로 or 버전 관리 툴 이라고 부름
- 다운할 때 항상 최신이 받아짐 & 수정된 부분이 어디인지 알 수 있음 // 툴로 보는게 편한걸로
- 쌤거 kooa77 -> 다운받아보기 // 이거저거 많음!
- 저장소 생성 -> 하드생성(나만), 웹사이트생성(다같이)

* 직접 메모리 잡은건 직접 해제해야 함!
- 포인터, malloc 등
- free로 해제해야 함
(시스템이 해야할 일을 본인이 해야함!)
- 게임에서는 중간중간 메모리 해제가 필요해서 포인터 사용
- 메모리 공간이 따로따로 존재하므로 개별적으로 다 지워야함 => malloc한 개수만큼 free가 실행되어야 함(new 실행한 개수만큼 delete 사용해야 함)
- 좋은 프로그래밍 : malloc 만든 후 free나 delete가 자동화되게 작성하는 것

* 취직관련
- 회사입장에서는 갑자기 비슷한 포폴이 들어옴 => 경쟁력이 없어짐
- 개인 개발을 많이 해봐야 함
- 취업만 목표로하면 잘 안됨을 알아야 함

=> 그래서 결론은
- 프로그램 공부 2가지 : 지식, 노하우(경력)
- 지식 : 책, 인강 등 // 독학이 쉬움, 어려워도 정답이 정해져 있음
- 노하우 : 지식의 영역이 x(책으로 배울 수 없음요), 지식을 언제 어떻게 사용하느냐 + 어떤 프로그램이 좋은 프로그램인가
=> 지식양과 스케일은 비례하지 않음
=> 어떻게 하면 다음단계로 넘어갈 수 있을까 고민해봐야함
=> 기존 지식으로 제대로된 게임을 만들기 위해서 구상하고 그 게임을 만들기 위해서 노력해야함

ex) 조건문 10개가 있을 때, 이를 대체하는 코드를 작성하시오 등

* 사후검토

* 객체지향(Object Oriented Programing/OOP)
- 더 나은 프로그래밍을 하기 위한 패러다임
(패러다임 : 한 시대의 사람들의 견해나 사고를 근본적으로 규정하고 있는 인식의 체계, 또는 사물에 대한 이론적인 틀이나 체계)
- 데이터를 함수로 던졌을 때, 데이터가 변경되서 나옴 => 절차지향(데이터와 함수가 중심), 통제하는 사람 = 프로그래머(기획자../실무군요) ==> 인간적
- 객체(데이터, 함수), 같은 객체가 많고 스스로를 통제함 => 객체지향(객체/object 중심), 통제하는 사람 = 객체
ex) 1 + x = 4 (절차지향) / x = 4 - 1 (객체지향) 이런 느낌

- ot -> 실습(역전) -> oop