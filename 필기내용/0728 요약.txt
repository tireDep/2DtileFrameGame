0728 요약
* 서론
- 프로그램은 반복문이랑 조건문으로 이루어져있음(이론적)

* 이번 프로젝트 명세서 
- 코어프레임 스펙
-> 타일맵
-> 플레이어(키보드, 마우스)
-> 몬스터(공격 등)
-> 아이템(먹기)
-----------------------------------(컴포넌트)
- 기술 스펙
-> WinAPI
-> Direct X 2D
-> Component System(게임의 큰 구조) & 길찾기(어떻게 동작하는가/AI 동작 등)
-> Sprite 타일맵
==> 규모가 큰 게임 구조를 어느정도 이해할 수 있음
// 다이렉트x는 초반에만 배우고 나중에는 그냥 사용하는 듯(유니티 에셋같은건가..)

* Window Programing
- 윈도우OS에서 하는 프로그래밍 // 아니 잠깐 이거 내가 했던거 아닌가..?
- 지정된 자리에만 앉을 수 있음
- 눈에 보이는 모든 것은 윈도우(창)
- App -> Window => 하나의 프로그래밍은 하나의 윈도우로 표현되는 것
- 윈도우를 여러개 출력할 수 있음(한 번에 여러개 실행가능) => 여러개의 윈도우(App)을 띄울 수 있는게 가장 큰 차이점!
- Window OS의 허락이 있어야 함!!
- 윈도우에서 화면으로 띄워줄 때 => ID 필요(Handle)
+) 스케쥴링 개념이랑 좀 다른거인듯(윈도우에서 여러개를 실행하기 위한 방법 중 하나 => 프로그래밍에서는 우선순위 큐) / 백그라운드에 있으면 핸들은 필요x, 따로 존재하기는 함(프로그램을 돌리기 위한 기본적인 핸들 -> 만드는 순간 생성되는 것) => 행동을 하기 위해서는 핸들이 꼭 필요함 / 최신 os에서 구 프로그램이 실행 안되는데에는 여러 이유가 있는데 보안이나 API 호환이 안되기 때문 등이 있음 / 프로세스를 프로그램으로 봐도 무방함

=> 윈도우가 통제/제어를 하기 위해서 하는 것(멀티태스킹이 되면서 변경점)
- 자원의 접근을 막음 : 하드웨어 자원(cpu, rom 등)에 예전에는 직접 접근 가능, 지금은 불가능
- Event Driven Programing(이벤트/사건 주도 프로그래밍) 방법 사용 : 사건이 발생했을 때만 반응하는 것, 일어나지 않을 때는 반응하지 않음 -> 이벤트를 발생시키는 것은 윈도우가 결정함!!(실행 유무는 윈도우가 결정, 처리는 사용자가) --> 이벤트 발생은 WindowOS / 처리는 User
ex) 선생님/윈도우, 책상/자원, 학생/프로그램
=> 윈도우는 해도 되는지 안되는지만 판별, 행동은 사용자가 설정해야함
- 윈도우 정책에 반하는게 많음..!

* Direct X 생성 과정
- 프로그램 : 반복문, 조건문
- 윈도우 : 허락(자원 주기 / 여러개 중에 1개의 윈도우를 내거로 할 수 있음 / 사건 주도 프로그래밍)
- 게임업계에서는 cpu, gpu, ram 등이 거의 100%로 사용해야 함 / 전체화면으로 실행 / 이벤트가 발생하지 않아도 npc가 움직인다든가 등 => 윈도우 정책에 반함 -> 초창기에는 윈도우로 게임을 만들지 않음 -> 게임에 한해서만 룰을 벗어나게 해줌 => Direct X

* Direct X
-> 게임을 위해 만들어진 라이브러리
+) 해상도 까지 바꾸면서 게임만 나옴
-> 자원에 직접 접근 가능 : 에러나 버그는 일어남 -> 게임이 에러날 경우 컴퓨터 자체를 꺼야함 => 쉐이더 사용(먼저 등장은 영화(픽사), GPU 내에 직접 명령하는 것, CPU랑 상관X)
+) 둘이 하는 일이 다름
CPU : 연산이 빠름(사칙연산)
GPU : 화면 출력이 빠름(그래픽 카드 성능이 좋아짐)
+) 쉐이더는 GPU회사에서 제공(엔비디아(CG), 라데온 등), 윈도우 기타 OS랑은 상관 없음
=> 쉐이더를 사용하면 GPU에 명령 내림(성능 향상 관련) / 쉐이더를 사용하지 않으면 CPU에서 돌아감, 근데 이러면 윈도우에서 결정해서 GPU에서 돌아갈 수도 있음
-> 이벤트 없이도 실행 가능

+) 관련 라이브러리
-> OpenGl(건축, 캐드 등) - 업계 표준
근데 윈도우에서는 다이렉트엑스가 빠르기 때문에 이거 사용, mac 등에서 돌아가게 하려면 크로스 플랫폼 작업을 해야함 / 
-> Metal - ios
-> Vvlkan - AOS

+)
-> 이차원 : 이차방정식(cpu)
-> 삼차원 : 행렬(gpu)

+)
sounds / 2D / 3D 등 여러 기능 지원해줌

+)
다이렉트 9, 10이랑 차이가 많긴 한데 최신버전을 사용할 경우 구 버전에서는 성능저하가 심하기 때문에 9을 사용할 수도 있음

* 정리!
- 프로그램 : 반복문, 조건문 + 어떤 자료구조 사용인지
- 윈도우 프로그래밍 : 허락을 받아야 함
- 다이렉트 엑스 : 특정 부분에 있어서는 허락을 받지 않아도 됨

=> 돌아가게 하는 것 : 반복문(for, while etc), 조건문(if, switch etc)
=> 재료 : 더 좋은 재료([] / LinkedList / struct / class etc)
=> 재료가 많고+좋아야 좋은 프로그램!!
=> 돌아가게 하는 것이 많고 재료가 적으면 안 좋음(if문 많으면 막장됨으로 알고 있음 됨)

* 이제부터 C#인가 봅니다!

* 순서
- 윈도우를 띄우려고 함 -> 아이디가 없음
- 아이디를 생성 -> 등록이 되어 있지 않음
- 윈도우 스타일 만들고 등록

+) 함수 포인터

* 객체지향 관련
- 윈도우 이전에는 매킨토시OS 사용