0714 요약
* 게임개발
- 인디게임은 운이 따라야함

* 컴파일 안될 경우
-> debug가 x86 / x64인지 확인
-> 속성에서 일반 -> Windows SDK 버전 확인

* 캡슐화
- 외부에서 알수 있는 요소가 없음
- 장점 : 유연성, 확장성(기능만 해당)이 좋아짐 => 문제없이 빠르게 추가
- 단점 : 어떤 버그를 잡는것이 어려워짐

* 다형성
- 다양하게 알아서 변화함
- 상속 개념 이해해야 함

* 파일 만드는 시점
- 인클루드 한 후 없는거 확인하고 생성
=> 선 에러 생성, 후 해결하는 방식으로 처리해야 함

* 상속
- 한 클래스가 다른 클래스에서 정의된 속성(자료, 함수)를 이어받아 그대로 사용
- 이미 정의된 클래스를 바탕으로 필요한 기능을 추가하여 정의
=>(중요개념!) 상속을 받으면 같은 타입으로 취급(이게 있어야지 속성을 그대로 사용할 수 있음) / 추상(일반화된 개념)
=> 실전에서는 공통점을 찾는 개념임
=> 같은 타입으로 취급하나 동작은 다를 수 있음
ex) 사람a와 사람b 는 모두 사람이다/ 모두 학생이다 등

- 상속을 받으면 같은 타입으로 취급해줌
class 이름 : public 상속받을 클래스 이름 
- virtual 사용 -> 나를 상속받은 클래스가 같은 이름인 함수가 있다면 그걸 사용함 ==> 오버라이딩

* 오버 라이딩
- 모양은 같은데 어떤 클래스냐에 따라서 다르게 작동됨
vs 오버로딩
- 

* 객체지향 개발 5대 원리 : SOLID
==>지키려고 하면 어려움.. 하다보면 지켜짐(?)
- SRP(Single Responsibility Principle) : 단일 책임의 원칙
-> 작성된 클래스는 하나의 기능만 가지며 클래스가 제공하는 모든 서비스는 그 하나의 책임을 수행하는데 집중되어 있어야 한다는 원칙
=> 호출 했을때 에러나면 안되는거 생각하면 될 듯(빈함수라도) ==> 클래스의 책임!(필요한 것만 있어야함)
- OCP(Open Close Principle) : 개방폐쇄의 원칙
-> 확장에는 열려있고(기능), 변경(데이터)에는 닫혀있어야 함
==> public, private 설정 같은 거 생각하면 될 듯
- LSP(The Liskov Substitution Principle) : 리스코브 치환의 원칙
-> 서브 타입은 언제나 기반 타입으로 교체할 수 있어야 한다
==> 대체했을 때, 실행은 될 수 있음(정상작동이 아닐 뿐)
-  ISP(Interface Segregation Principle) : 인터페이스 분리의 원칙
-> 자신이 사용하지 않는 인터페이스는 구현하지 말아야 한다는 원리
==> 사용하지 않는건 삭제
===> 백지상태에서 클라이언트가 원하는 것을 구현하는 식으로 나아가면 됨(호출 -> 선언 -> 작성 요런식)
- DIP(Dependency Inversion Principle) : 의존성역전의 원칙
-> 구조적 디자인에서 발생하던 하위 레벨 모듈의 변경이 상위 레벨 모듈의 변경을 요구하는 위계관계를 끊는 의미의 역전, 실제 사용 관계는 바뀌지 않으며, 추상을 매개로 메시지를 주고 받음으로써 관계를 최대한 느슨하게 만드는 원칙
==> 모든 문제 처리는 각 클래스에서만 해결해야지, 부모 클래스로 넘어가면 안됨
===> 자식 클래스를 수정할때, 부모 클래스까지 수정되면 안됨

* 객체지향 관련 추가내용
- 상속&설계(예상) -> x > 예상&준비 X
=> 변화에 대응할 수 있도록 하는게 좋은 코드

- 현재 최선을 다한 코드 => 준비는 없다
- 리팩토링(언제든지 수정 가능) -> 디자인 패턴 존재 => 목표지향적 코드(목표'만' 충족, 작은 설계)
- 테스트 목표 개발 , 애자일 개발(기민한/익스트림)

* 참고!
- switch나 if 문은 없을 수록 좋음
- 각 소스코드에 0~1개인것인 가장 best!!
- 주석 잘 지우기

* git remote branch 삭제
- git push <remote_name> --delete <name>

* git 추적 중지 관련
- git rm -r --cached 폴더명
- git rm --cached 파일명

* 참고 사이트
- https://git-scm.com/book/ko/v2/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%A6%AC%EB%AA%A8%ED%8A%B8-%EB%B8%8C%EB%9E%9C%EC%B9%98
// 리모트 브랜치

- https://code.i-harness.com/ko/q/e4939
// git 추적 중지 관련