0707 요약
* 함수 이름 잘 정해야 함!
ex) PrintText 인지 Print인지
-> 객체지향은 남들이 봤을 때 무엇인지 정확히 몰라야 좋은 것

* 객체지향 vs 절차지향
- private vs public의 차이!
- 외부에서 가져다 쓸 수 있으나 수정할수는 없음!
- 절차지향 : 나-> 기능
-> 기능이 앞에 보임(기능 / 데이터 )
-> struct data => func(data)
-> 점점 구체적

- 객체지향 : 나 -> 객체 -> 기능
-> 데이터가 앞에 보임
-> data.func()
-> 점점 추상적

* 리펙토링 : 동작은 같은데 내부 구조가 바뀜
-> 다 바꾸지 않으면 실행이 안되야함!(선 에러 후 실행가능)

* 생성자, 소멸자(해제자)
- 만들지 않아도 내부적으로는 실행됨
- but, 따로 실행시킬게 있으면 설정해줘야함

! 주의 !
- 클래스는 malloc으로 생성하면 안됨! -> 생성자 호출이 되지 않음!!
- 마찬가지 이유로 free가 아닌 delete사용해야 함

* 캡슐화
- struct / 구조체 -> class / 객체
- 변경 방향 : 최대한 감추는 것(외부로부터) => 안전해지기 위해서
- 특별한 예외 제외하고 데이터(변수)는 다 감춰야 함
- 함수는 열어줘도 되지만, 외부에서 사용하지 않는것은 지우거나 감춤

- 사례(핵심 / 전문가, 비전문가, 아는사람)
1) 기계어 : 사칙연산 / 1시간, 하루, 1년
2) 어셈블러 : 사칙연산 / 5분, 1시간, 2일
3) 절차지향 : 사칙연산 중요x, 얼마나 복잡한 기능?(1개 앱)
4) 객체지향 : 더욱 큰 프로젝트(n개의 앱을 돌려야 함)
- 서로 간섭하면 안됨! => 감춰야 함

* 반드시 감춰야 하는것 -> 데이터

* git 관련
- .sln + 프로젝트명 폴더안 폴더 제외 나머지를 올리는 것

* 과제 - Destroy 구현 / 정독 
/ 캡슐화 안된 부분 확인해보기 printlib.cpp swtich문 부분
(상속 개념+다형성 필요한듯)