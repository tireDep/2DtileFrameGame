0616 요약
* 이때까지 한 것
- CoreFrame(engine) // 변화x(고정) -> Script(data) // 변환 => 데이터 주도 계발
- script를 편하게 사용하기 위해서 tool 사용
ex) 메모장, 엑셀 등
- unreal, unity => edit tool 지원
- coreframe : 게임이 돌아가는 것
- script : 게임 컨텐츠

* 해야하는 것
- save&load
- 공간 재 설정(낭비 없이) // vector 쓰려나..? 아니 근데 c에 저거 있나 이거 c++로 짜고 있는거같긴한데 과연 => malloc 이었다고 한다

* save&load 접근
- 어디까지 진행했는지 같은 거?
- select : 지금 위치, nextselect : 다음위치 저장 => 이건 나중에 취향 따라서
- 지금은 select 저장
- 먼저 중간에 나갈 수 있는 기능 추가해야 함!

* 중간 종료
- 27 : ESC 의미함
- 선택지에서 중간 종료 추가함(ESC, Q 등)

* save&load 해결
- r : 읽기 모드 / w : 쓰기 모드 / + : 없으면 생성 / b : 바이너리파일
- fwirte(주소, 크기, 개수, 파일);
=> 주소는 포인터!
=> 주소로 변수 시작 위치, 크기*개수로 변수의 끝 위치 판별
- fread, fwrite 모두 에러 발생 x이면 1반환함

* 프로그램을 안고치고서 해결할 수 있는 방법도 알아둬야 함
- 데이터만 바꿔서 렉 잡기 등 // 스도리카에서 시온슾 스킬모션 삭제 같은 느낌인듯
- pc는 점검 가능 but 모바일은 점검하기 힘듦(ios 더 힘듦)

* 기획
- 프로그래밍 용어로는 요구사항이라고 함
ex) 데이터 로드 관련
- 요구사항 : 로드를 하시겠습니까? Y or N (Y : 로드 / N : 처음부터)
- 해결 : 문구출력 -> 입력받기 -> 입력에 따른 처리

* 게임을 볼 때
- 어떤 객체와 어떤 객체 사이에 상호작용이 일어나는가 이런 식으로 볼 수 있어야 함

* 지금 하는거로는 간단한거는 가능 but 큰 게임 같은건 아직 무리
- 할 수는 있는데 if나 switch 도배... => 문제 발생 큼

* 절차지향 VS 객체지향
- 절차지향적 => 사람 의식의 흐름 / 데이터의 흐름이 제일 중요함 / GUI 나오면서부터 게임으로 만들기가 힘들어짐 + 다른 행동을 각각 만들기가 힘듦 / 컴퓨터를 명령어의 목록으로 보는 시각 => 동시에 생각하기 힘듦(하나의 큰 객체), 객체끼리 만났을 때 결과를 알 수 있음
- 객체지향적
 => 객체들의 모임으로 파악하고자 하는 시각
 => 동시에 할 수 있음(여러 객체 동시 상호작용), 객체끼리 만났을 때 결과를 알 수 없음 
ex) RTS류 中 스타크래프트 -> 1번객체 생성&룰, 2번객체 생성&룰, 3번객체 생성&룰     
    => 3개가 만났을 때 상황은 실행 전까지 모름
ex2) a : 사람(사람이면 악수) / b : 로봇(만나면 악수) / c : 깡패(악수시 때림)
     => 결과는 실행해야지 알 수 있음
==> 생성후 상호작용은 책임지지 않음
===> 객체지향이후 절차지향으로는 잘 안돌아감

* 문단의 크기, 문장 내의 문자열 개수 조절
=> malloc 사용!!
- 파일을 열자마자 문단 개수 확인

=> 나중에 추가할 것
- 메인메뉴&세이브로드 수정(선택해서 할 수 있게)
- 강종 추가
- 선택지 추가
- 스토리 보강